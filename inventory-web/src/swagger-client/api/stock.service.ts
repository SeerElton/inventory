/**
 * Elton's Inventory
 * Reboot
 *
 * OpenAPI spec version: 1.0.11
 * Contact: nhlana.2@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InsertStockRequest } from '../model/insertStockRequest';
import { StockResponse } from '../model/stockResponse';
import { ToastrResponse } from '../model/toastrResponse';
import { UpdateStockRequest } from '../model/updateStockRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StockService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add stock item
     * This endpoint adds an inventory item into our system
     * @param body stock item
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stockControllerAddStock(body: InsertStockRequest, observe?: 'body', reportProgress?: boolean): Observable<StockResponse>;
    public stockControllerAddStock(body: InsertStockRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StockResponse>>;
    public stockControllerAddStock(body: InsertStockRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StockResponse>>;
    public stockControllerAddStock(body: InsertStockRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling stockControllerAddStock.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StockResponse>('put',`${this.basePath}/stock`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get stock
     * This endpoint gets a list of all inventory item for a user, it uses the auth token to get user details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stockControllerGetStock(observe?: 'body', reportProgress?: boolean): Observable<Array<StockResponse>>;
    public stockControllerGetStock(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StockResponse>>>;
    public stockControllerGetStock(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StockResponse>>>;
    public stockControllerGetStock(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StockResponse>>('get',`${this.basePath}/stock`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove stock item
     * This endpoints remove an inventory item
     * @param id Id of item to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stockControllerRemoveStockItem(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StockResponse>>;
    public stockControllerRemoveStockItem(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StockResponse>>>;
    public stockControllerRemoveStockItem(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StockResponse>>>;
    public stockControllerRemoveStockItem(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling stockControllerRemoveStockItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StockResponse>>('delete',`${this.basePath}/stock/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update stock item
     * This endpoint updates an existing inventory item
     * @param body stock item
     * @param id stock item id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stockControllerUpdateStockItem(body: UpdateStockRequest, id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StockResponse>>;
    public stockControllerUpdateStockItem(body: UpdateStockRequest, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StockResponse>>>;
    public stockControllerUpdateStockItem(body: UpdateStockRequest, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StockResponse>>>;
    public stockControllerUpdateStockItem(body: UpdateStockRequest, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling stockControllerUpdateStockItem.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling stockControllerUpdateStockItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<StockResponse>>('post',`${this.basePath}/stock/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
